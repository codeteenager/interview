import{_ as s,c as a,o as n,V as o}from"./chunks/framework.5c36ac09.js";const e="/interview/images/44.png",u=JSON.parse('{"title":"知识广度","description":"","frontmatter":{},"headers":[],"relativePath":"web/breadth.md","filePath":"web/breadth.md","lastUpdated":1673845130000}'),l={name:"web/breadth.md"},p=o(`<h1 id="知识广度" tabindex="-1">知识广度 <a class="header-anchor" href="#知识广度" aria-label="Permalink to &quot;知识广度&quot;">​</a></h1><p>前端工程师有很多，而是技能全面、独当一面的前端工程师到哪里都是“香饽饽”，企业争抢。所以，技术广度将决定你的稀缺性，以及未来的发展空间。</p><p>现代前端工程师已经不单单是开发页面了，你可能需要去开发移动端、服务端。或者和他们有亲密的合作，你需要了解他们的运作流程。</p><p>企业想要招聘到一些全能型的工程师，能在工作中串通上下流程，而不是只做开发。</p><h2 id="移动端h5-click有300延迟-如何解决" tabindex="-1">移动端H5 click有300延迟，如何解决？ <a class="header-anchor" href="#移动端h5-click有300延迟-如何解决" aria-label="Permalink to &quot;移动端H5 click有300延迟，如何解决？&quot;">​</a></h2><p>初期解决方案试用FastClick</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">load</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">FastClick</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>FastClick原理就是监听touchend事件(touchstart touchend会优先于click触发)，使用自定义DOM事件模拟一个click事件，把默认的click事件(300ms之后触发)禁止掉。</p><p>现代浏览器的改进,android chrome32版本之后，iOS是在9.3版本之后，在head中有<code>width=device-width</code>属性即可。只要有这个属性，浏览器就会人为已经做了浏览器优化了。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width,initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X-UA-Compatible</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ie=edge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="网络请求中-token和cookie有什么区别" tabindex="-1">网络请求中，token和cookie有什么区别？ <a class="header-anchor" href="#网络请求中-token和cookie有什么区别" aria-label="Permalink to &quot;网络请求中，token和cookie有什么区别？&quot;">​</a></h2><p>cookie：HTTP无状态，每次请求都要带cookie，以帮助识别身份。服务端也可以向客户端set-cookie，cookie大小限制4kb。默认有跨域限制，不可跨域共享、传递cookie。在HTML之前cookie常被用于本地存储，HTML5之后推荐使用localStorage和sessionStorage。</p><p>现代浏览器开始禁止第三方cookie，和跨域限制不同，这里是禁止网页引入的第三方JS设置cookie。打击第三方广告，保护用户隐私，新增属性SameSite：Strict/Lax/None，值可自己选择。</p><p>cookie和session：cookie用于登录验证，存储用户标识(如useId)，session在服务端，存储用户详细信息，和cookie信息一一对应，cookie+session是常见的登录验证解决方案。 <img src="`+e+'" alt=""></p><p>cookie是HTTP规范，而token是自定义传递。cookie会默认被浏览器存储，而token需自己存储。token默认没有跨域限制。</p><p>token常用的技术术语是JWT(JSON Web Token)，可以替代cookie + session的方式。前端发起登录，后端验证成功之后，返回一个加密的token，前端自行存储这个token(其中包含了用户信息，加密了)，以后访问服务端接口都带着这个token，作为用户信息。</p><h2 id="session和jwt哪个更好" tabindex="-1">Session和JWT哪个更好 <a class="header-anchor" href="#session和jwt哪个更好" aria-label="Permalink to &quot;Session和JWT哪个更好&quot;">​</a></h2><p>首先没有什么好不好坏，只有适合不适合。</p><p>session的优点是原理简单，易于学习，用户信息存储在服务端，可快速封禁某个用户。缺点是占用服务端内存，硬件成本高，多进程多服务器时不好同步，需使用第三方缓存，如redis。默认有跨域限制。</p><p>JWT的优点是不占用服务端内存，多进程、多服务器不受影响，没有跨域限制。缺点是用户信息存储在客户端，无法快速封禁某用户，如果想封禁就要建立黑名单。万一服务端秘钥被泄露，则用户信息全部丢失。token体积一般大于cookie，会增加请求的数据量。</p><p>如有严格管理用户信息的需求(保密、快速封禁)推荐Session，如没有特殊要求，则使用JWT(如创业初期的网站)。</p><h2 id="http协议和udp协议有什么区别" tabindex="-1">HTTP协议和UDP协议有什么区别 <a class="header-anchor" href="#http协议和udp协议有什么区别" aria-label="Permalink to &quot;HTTP协议和UDP协议有什么区别&quot;">​</a></h2><p>前端用UDP协议比较少，大部分还是使用HTTP协议。</p><p>网络协议HTTP协议在应用层，TCP、UDP协议在传输层，严格来说，应该拿TCP和UDP进行比较。</p><p>TCP协议：有连接(三次握手)，有断开(四次挥手)，稳定传输。</p><p>UPD协议：无连接，无断开，不稳定传输，但效率高。适合于视频会议、语音通话。</p>',26),t=[p];function c(r,i,D,F,y,d){return n(),a("div",null,t)}const k=s(l,[["render",c]]);export{u as __pageData,k as default};
