import{_ as s,c as n,o as a,a as l}from"./app.550c5e96.js";const b=JSON.parse('{"title":"知识深度","description":"","frontmatter":{},"headers":[{"level":2,"title":"JS内存泄露如何检测？场景有哪些？","slug":"js内存泄露如何检测-场景有哪些","link":"#js内存泄露如何检测-场景有哪些","children":[]},{"level":2,"title":"vdom真的很快吗？","slug":"vdom真的很快吗","link":"#vdom真的很快吗","children":[]},{"level":2,"title":"浏览器和nodejs事件循环的区别","slug":"浏览器和nodejs事件循环的区别","link":"#浏览器和nodejs事件循环的区别","children":[]},{"level":2,"title":"遍历数组，for和forEach哪个更快","slug":"遍历数组-for和foreach哪个更快","link":"#遍历数组-for和foreach哪个更快","children":[]},{"level":2,"title":"Vue每个生命周期都做了什么？","slug":"vue每个生命周期都做了什么","link":"#vue每个生命周期都做了什么","children":[]},{"level":2,"title":"Vue2 Vue3 React的diff算法有何区别？","slug":"vue2-vue3-react的diff算法有何区别","link":"#vue2-vue3-react的diff算法有何区别","children":[]},{"level":2,"title":"Vue-router的MemoryHistory是什么？","slug":"vue-router的memoryhistory是什么","link":"#vue-router的memoryhistory是什么","children":[]},{"level":2,"title":"知识深度很重要","slug":"知识深度很重要","link":"#知识深度很重要","children":[{"level":3,"title":"面试评级","slug":"面试评级","link":"#面试评级","children":[]},{"level":3,"title":"难题攻坚","slug":"难题攻坚","link":"#难题攻坚","children":[]},{"level":3,"title":"同事之间的影响力","slug":"同事之间的影响力","link":"#同事之间的影响力","children":[]},{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]}],"relativePath":"web/depth.md","lastUpdated":1673541866000}'),p={name:"web/depth.md"},e=l(`<h1 id="知识深度" tabindex="-1">知识深度 <a class="header-anchor" href="#知识深度" aria-hidden="true">#</a></h1><p>大厂面试会通过各种难题来试探你的技术深度，评估你的技术发展潜力，这是入职后确定级别、薪资的重要参考。所以，技术深度将决定你的“钱途”。</p><p>为何要考察呢？</p><ul><li>深挖你的技术“天花板”，看未来潜力和可培养性 —— 特别是对于刚毕业不就的新人。</li><li>如果面试通过了，大公司要定级（P6 还是 P7），其中技术深度就是很重要的参考标准。一个没有技术深度的人，不可能给高级别职称。</li><li>希望和有技术深度的工程师共事。而且，那么多候选人，择优录取，肯定希望能招募到技术深度好的工程师。</li></ul><p>考察重点是我们日常使用的技术，的一些深入。没有什么特别出格的。</p><ul><li>非应用层面，深入到原理层面</li><li>JS相关原理</li><li>Vue React 相关原理</li></ul><p>技术深度，就有那么 1-2 个方面即可。深了，就不可能全面。技术深度的题目不过关，也不一定就面试不通过。</p><h2 id="js内存泄露如何检测-场景有哪些" tabindex="-1">JS内存泄露如何检测？场景有哪些？ <a class="header-anchor" href="#js内存泄露如何检测-场景有哪些" aria-hidden="true">#</a></h2><p>JS垃圾回收是指回收那些函数已经执行完成再也用不到的对象或数据，之前用的是引用计数，但是循环引用有缺陷，现在用的是标记清除，从js的根window向下遍历，找到就保留，找不到就清除。</p><p>内存泄露检测要看内存的变化，如果内存升高升高降下来，这是正常的情况，不算内存泄露。所以我们要看如何检测内存变化。内存变化可以使用chrome devtools中的Performance工具来进行检测。</p><p>内存泄露的场景(以Vue为例)</p><ul><li>被全局变量、函数引用，组件销毁时未清除</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">data</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            arr</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">30</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">mounted</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printArr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//Vue2</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">beforeUnmount</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">printArr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li>被全局事件、定时器引用，组件销毁时未清除</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">data</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            arr</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">30</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            intervalId</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">mounted</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">intervalId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//Vue2</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">beforeUnmount</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">intervalId</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">clearInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">intervalId</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">data</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            arr</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">30</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">printArr</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">mounted</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">resize</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,this.</span><span style="color:#A6ACCD;">printArr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//Vue2</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">beforeUnmount</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">resize</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,this.</span><span style="color:#A6ACCD;">printArr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>被自定义事件引用，组件销毁时未清除</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">data</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            arr</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">30</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">printArr</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">mounted</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">showMsg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,this.</span><span style="color:#A6ACCD;">printArr</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//Vue2</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">beforeUnmount</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">off</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">showMsg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,this.</span><span style="color:#A6ACCD;">printArr</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>前几年前端不太注重内存泄露，因为不像后端7*24小时运行。近几年前端功能不断复杂，内存问题也要重点考虑。 那么闭包是内存泄露吗？</p><p>严格意义上来说闭包不算内存泄露，内存泄露是非预期的情况，想让它 回收但是它没回收。而闭包是符合预期的。</p><h2 id="vdom真的很快吗" tabindex="-1">vdom真的很快吗？ <a class="header-anchor" href="#vdom真的很快吗" aria-hidden="true">#</a></h2><p>vdom也就是Virtual DOM 虚拟dom，vue和react都使用vdom实现内部组件的更新，它是用JS对象来模拟DOM节点数据，由React最先推广使用。</p><p>Vue、React相比于jquery时代，它的价值是什么呢？</p><ol><li>组件化，组件化在很早就有了，后端使用JSP、PHP的时候组件化就已经有了，包括后来有新的标准Web Components。所以组件化是承接之前技术的一个基本使用，它是一个必要条件</li><li>数据视图分离、数据驱动视图--这是核心，只关注业务数据，而不用关心DOM变化</li></ol><p>现在很多初学的前端工程师，一上来使用Vue、React，对DOM操作不太熟练，慢慢变成了Vue工程师。</p><p>那么如何实现数据驱动视图呢？那就使用vdom</p><p>所以vdom并不快，JS直接操作DOM才是最快的。但数据驱动视图要有合适的技术方案，不能全部DOM重建，vdom就是目前最合适的技术方案(并不会因为它快，而是合适)</p><h2 id="浏览器和nodejs事件循环的区别" tabindex="-1">浏览器和nodejs事件循环的区别 <a class="header-anchor" href="#浏览器和nodejs事件循环的区别" aria-hidden="true">#</a></h2><p>JS是单线程的(无论是浏览器还是nodejs)，浏览器中JS执行和DOM渲染共用一个线程，JS执行就暂停DOM渲染，因此异步就是解决这个问题而诞生，如果没有异步的话，同步执行JS就无法渲染DOM，渲染DOM就无法执行JS。</p><p>异步中又分为宏任务和微任务，宏任务就是常见的setTimeout、setInterval、网络请求，微任务就是promise、async/await。微任务在下一轮DOM渲染之前执行，宏任务在之后执行。因此微任务执行的更早一些，</p><p>Nodejs同样使用ES语法，也是单线程，也需要异步，异步任务也分宏任务和微任务。但是它的宏任务和微任务，分不同类型，有不同优先级。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setImmediate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setImmediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">timeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise then</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nextTick</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//start</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//end</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//nextTick</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//promise then</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//timeout</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//setImmediate</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>宏任务类型和优先级从高到低</p><ul><li>Timers - setTimeout setInterval</li><li>I/O callbacks - 处理网络、流、TCP的错误回调</li><li>Idle、prepare - 闲置状态(nodejs内部使用)</li><li>Poll轮询 - 执行poll中的I/O队列</li><li>Check检查 - 存储setImmediate回调</li><li>Close callbacks - 关闭回调，如socket.on(&#39;close&#39;)</li></ul><p>微任务类型和优先级</p><ul><li>包括promise、async/await、process.nextTick，注意process.nextTick优先级最高</li></ul><p>nodejs中event loop，先执行同步代码，然后执行微任务(process.nextTick优先级更高)，按顺序执行6个类型的宏任务(每个结束时都执行当前的微任务)</p><p>所以浏览器和nodejs的event loop流程基本相同，nodejs宏任务和微任务分类型，有优先级。</p><p>越低级的代码，性能往往越好，用现成的api不知道其内部的复杂度。日常开发别只考虑性能，forEach代码可读性更好，前提是复杂度一致。</p><h2 id="遍历数组-for和foreach哪个更快" tabindex="-1">遍历数组，for和forEach哪个更快 <a class="header-anchor" href="#遍历数组-for和foreach哪个更快" aria-hidden="true">#</a></h2><p>for会更快，forEach每次都要创建一个函数来调用，而for不会创建函数，函数需要独立的作用域，会有额外的开销。</p><h2 id="vue每个生命周期都做了什么" tabindex="-1">Vue每个生命周期都做了什么？ <a class="header-anchor" href="#vue每个生命周期都做了什么" aria-hidden="true">#</a></h2><ol><li>beforeCreate：在创建之前，创建了一个空白的Vue实例，data、method尚未被初始化，不可使用，也就是这个阶段是一个空白的Vue项目而已，在beforeCreate里面做不了什么东西。</li><li>created：这个时候Vue实例初始化完成了，也就是Vue的JS对象初始化完成了，然后响应式绑定完了。data、method都已经初始化完成，可以调用了。在created中与页面、DOM节点没有关系的东西和JS模型有关系的东西可以做了，比如获取一些属性，但是尚未开始渲染模板，Vue实例和模板还未发生关联，所以不要做与模板有关的事情。</li><li>beforeMount：在渲染之前，编译模板，调用render生成vdom。还没有开始渲染DOM。</li><li>mounted：完成DOM渲染，组件创建完成，开始由创建阶段进入运行阶段。</li><li>beforeUpdate：data发生变化之后，准备更新DOM，但是尚未更新DOM。</li><li>updated：data发生变化，DOM更新完成。注意不要在updated中修改data，可能会导致死循环。</li><li>beforeUnmount：组件进入销毁阶段，尚未销毁，还可使用。可移除、解绑一些全局事件、自定义事件。</li><li>unmounted：组件被销毁了，所有子组件也都被销毁了。</li></ol><p>keep-alive组件有两个生命周期：onActivated缓存组件被激活，onDeactivated缓存组件被隐藏。</p><p>Vue什么时候操作DOM比较合适？mouted和updated都不能保证子组件全部挂载完成，所以要用$nextTick渲染DOM</p><p>Ajax应该放在哪个生命周期？有两个选择created和mounted，推荐mounted。</p><p>Vue3 Composition API生命周期有何区别？用setup代替了beforeCreate和created。使用Hooks函数的形式，如mounted改为onMounted()。</p><h2 id="vue2-vue3-react的diff算法有何区别" tabindex="-1">Vue2 Vue3 React的diff算法有何区别？ <a class="header-anchor" href="#vue2-vue3-react的diff算法有何区别" aria-hidden="true">#</a></h2><p>Tree diff的优化：只比较同一层级，不跨级比较。tag不同则删掉重建，不再去比较内部的细节。子节点通过key区分(key的重要性)，for循环要有Key，这个key深入到diff算法的优化。优化后的时间复杂度为O(n)。</p><p>diff算法非常复杂，不要深究细节。既然是三者的比较，说出他们最大的不同即可。</p><p>React diif仅右移，Vue2双端比较，Vue3最长递增子序列。</p><p>Vue React为何循环时必须使用key，vdom diff算法会根据key判断元素是否要删除，匹配了key，则只移动元素性能较好。未匹配key，则删除重建性能较差。</p><h2 id="vue-router的memoryhistory是什么" tabindex="-1">Vue-router的MemoryHistory是什么？ <a class="header-anchor" href="#vue-router的memoryhistory是什么" aria-hidden="true">#</a></h2><p>MemoryHistory是适用于Vue3的vue-router，在Vue2中vue-router的abstract模式。</p><p>Vue-router三种模式主要是Hash、WebHistory、MemoryHistory(V4之前叫做abstract history)</p><p>React-router也有和Vue-router相同的三种模式。</p><h2 id="知识深度很重要" tabindex="-1">知识深度很重要 <a class="header-anchor" href="#知识深度很重要" aria-hidden="true">#</a></h2><p>虽然我们日常干的都是“拧螺丝”“搬砖”的 CURD 工作，也体现不出什么难度，但自身的知识深度真的很重要。工作是公司的、老板的，而能力是自己的，要区分开来。</p><h3 id="面试评级" tabindex="-1">面试评级 <a class="header-anchor" href="#面试评级" aria-hidden="true">#</a></h3><p>面试通过了，到底给你评定 P6 还是 P7 ？依据什么标准呢？</p><ol><li>第一个因素不是你的技术，而是团队的预算，例如他们还有没有 P7 的名额。如果有，那可以考虑；如果没有，你能力再好也大不了 P7 。说这个因素是告诉你：如果你的平级不高，不一定是个人的因素。</li><li>第二个因素就是你的综合技术能力，而其中技术深度就是最关键的一个。如果你只是浮于表面，从未深入到原理或者源码层面，那就很难有说服力。</li><li>大厂不同级别的工资是不一样的，所以技术深度直接决定了你的“钱途”。</li></ol><h3 id="难题攻坚" tabindex="-1">难题攻坚 <a class="header-anchor" href="#难题攻坚" aria-hidden="true">#</a></h3><p>在实际工作中，项目遇到了难题，老板可能会直接指派给你，也可能开会时叫人主动认领（此时你要量力而行，不要随意“抢答”）。无论何种方式，你接到了这样一个难题，是否能解决将决定你在领导心目中的形象。</p><p>最后，要解决难题，最需要的就是技术深度。否则你都看不清楚问题的本质，何谈解决？</p><h3 id="同事之间的影响力" tabindex="-1">同事之间的影响力 <a class="header-anchor" href="#同事之间的影响力" aria-hidden="true">#</a></h3><p>同事之间除了聊工作，还有很多私下随性沟通的机会，特别是午饭、午休时间。聊技术，永远是技术人员的话题。</p><p>在聊天过程中，大家都会发表个人的评论和观点。如果你有技术深度，看问题更加透彻，解释问题更加清晰，在同事眼中你自然就是一个“厉害的人”。</p><p>得到同事的认可和尊重，会增加工作的幸福感。人都有本能的社交需求。</p><h3 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-hidden="true">#</a></h3><p>所谓技术深度，深了就不可能广。所以，找准某一个方面深入进去即可，不可贪多。而且，要找一个主流的技术栈，如 Vue React 相关的，要考虑技术的实际价值。</p>`,70),o=[e];function r(t,c,F,i,y,D){return a(),n("div",null,o)}const d=s(p,[["render",r]]);export{b as __pageData,d as default};
