import{_ as p,o as l,c as o,Q as a,k as s,a as n}from"./chunks/framework.0d6e4592.js";const C=JSON.parse('{"title":"微前端","description":"","frontmatter":{},"headers":[],"relativePath":"web/micro-frontends.md","filePath":"web/micro-frontends.md","lastUpdated":1697375333000}'),e={name:"web/micro-frontends.md"},c=a(`<h1 id="微前端" tabindex="-1">微前端 <a class="header-anchor" href="#微前端" aria-label="Permalink to &quot;微前端&quot;">​</a></h1><h2 id="详细描述一下-qiankun-微前端框架的工作原理" tabindex="-1">详细描述一下 qiankun 微前端框架的工作原理 <a class="header-anchor" href="#详细描述一下-qiankun-微前端框架的工作原理" aria-label="Permalink to &quot;详细描述一下 qiankun 微前端框架的工作原理&quot;">​</a></h2><p>qiankun微前端框架可以将多个独立的前端应用组合成一个完整的网站，这些前端应用被称为微前端。下面是其工作原理：</p><ol><li>父应用加载子应用：父应用通过加载子应用的JavaScript入口文件，实现子应用的动态加载和启动。</li><li>沙箱机制：qiankun使用沙箱机制来隔离不同的微前端之间的代码和状态，以确保它们之间不会发生冲突。沙箱机制采用了Browser API提供的Iframe标签进行隔离。</li><li>路由映射：当用户访问一个子应用的路由时，qiankun会将这个路由映射到相应的子应用中去。这样，用户就可以在父应用的菜单栏中快速切换不同的子应用。</li><li>共享状态：qiankun提供了两种方式来处理不同微前端之间的共享状态：自定义hook函数和props传递。</li><li>生命周期管理：由于每个微前端都有自己的生命周期，qiankun需要对所有的微前端生命周期进行管理，以便在微前端切换、挂载和卸载时能够正确地执行相应的生命周期函数。</li><li>更优化的性能：qiankun通过预加载、缓存、静态资源优化等方式实现更加优化的性能。</li></ol><p>qiankun微前端框架通过动态加载、沙箱机制、路由映射、共享状态、生命周期管理和性能优化等多种手段实现了微前端的组合和管理。</p><h2 id="在使用-qiankun-时-如果子应用为基于-jquery-的多页应用-应该处理静态资源的加载问题" tabindex="-1">在使用 qiankun 时，如果子应用为基于 jQuery 的多页应用，应该处理静态资源的加载问题？ <a class="header-anchor" href="#在使用-qiankun-时-如果子应用为基于-jquery-的多页应用-应该处理静态资源的加载问题" aria-label="Permalink to &quot;在使用 qiankun 时，如果子应用为基于 jQuery 的多页应用，应该处理静态资源的加载问题？&quot;">​</a></h2><p>如果子应用是基于jQuery的多页应用，我们可以通过qiankun提供的prefetch预加载静态资源来优化性能，具体方法如下：</p><p>在子应用中设置webpack的output.publicPath属性为相对路径，以确保子应用可以正确地加载其它静态资源，比如图片、CSS文件等。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    publicPath: </span><span style="color:#9ECBFF;">&#39;./&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    publicPath: </span><span style="color:#032F62;">&#39;./&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在父应用种使用registerMicroApps函数注册子应用时，设置微应用的prefetch属性：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// main.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { registerMicroApps, start } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;qiankun&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">registerMicroApps</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;sub-app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry: </span><span style="color:#9ECBFF;">&#39;//localhost:7100&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    container: </span><span style="color:#9ECBFF;">&#39;#app-container&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    activeRule: </span><span style="color:#9ECBFF;">&#39;/sub-app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    prefetch: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 预加载</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// main.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { registerMicroApps, start } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;qiankun&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">registerMicroApps</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;sub-app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    entry: </span><span style="color:#032F62;">&#39;//localhost:7100&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    container: </span><span style="color:#032F62;">&#39;#app-container&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    activeRule: </span><span style="color:#032F62;">&#39;/sub-app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    prefetch: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 预加载</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>当在父应用中匹配到/sub-app路由时，qiankun会自动预加载子应用入口文件和所有可能需要加载的静态资源。例如，在子应用中访问了一个HTML文件，那么这个HTML文件将会被预加载。</p><p>在子应用中手动删除不需要的预加载资源。由于子应用是基于jQuery的多页应用，因此需要手动删除不需要预加载的资源，否则会造成不必要的网络请求浪费。例如，以下代码演示了如何手动删除不需要的预加载资源：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">links</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;link[rel=stylesheet][href]&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scripts</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script[src]&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prefetchedLinks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> links.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;[data-qiankun-prefetch]&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prefetchedScripts</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scripts</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;[data-qiankun-prefetch]&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script[data-qiankun-prefetch]&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 删除不需要的预加载资源</span></span>
<span class="line"><span style="color:#E1E4E8;">  links</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">not</span><span style="color:#E1E4E8;">(prefetchedLinks)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  scripts</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">not</span><span style="color:#E1E4E8;">(prefetchedScripts)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">links</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;link[rel=stylesheet][href]&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scripts</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script[src]&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prefetchedLinks</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> links.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;[data-qiankun-prefetch]&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prefetchedScripts</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scripts</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;[data-qiankun-prefetch]&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script[data-qiankun-prefetch]&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 删除不需要的预加载资源</span></span>
<span class="line"><span style="color:#24292E;">  links</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">not</span><span style="color:#24292E;">(prefetchedLinks)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  scripts</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">not</span><span style="color:#24292E;">(prefetchedScripts)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在DOM渲染完成后，查找所有需要删除的资源，并将其从页面中删除。</p><h2 id="在使用-qiankun-时-如果子应用动态插入了一些标签-你会如何处理" tabindex="-1">在使用 qiankun 时，如果子应用动态插入了一些标签，你会如何处理？ <a class="header-anchor" href="#在使用-qiankun-时-如果子应用动态插入了一些标签-你会如何处理" aria-label="Permalink to &quot;在使用 qiankun 时，如果子应用动态插入了一些标签，你会如何处理？&quot;">​</a></h2><p>在使用qiankun时，如果子应用动态插入了一些标签，需要做以下处理：</p><ol><li>使用setExternalScripts和setExternalStyles方法 可以通过setExternalScripts和setExternalStyles方法手动将子应用中动态插入的script和link标签设置为外部资源。这样，qiankun就能正确地处理这些标签，并确保它们不会互相干扰。</li></ol><p>具体实现方法如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在子应用动态插入script标签</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">script.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://cdn.example.com/some-script.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(script);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 手动设置script标签为外部资源</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { setExternalScripts, setExternalStyles } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;qiankun&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setExternalScripts</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;https://cdn.example.com/some-script.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在子应用动态插入script标签</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">script</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">script.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://cdn.example.com/some-script.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(script);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 手动设置script标签为外部资源</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { setExternalScripts, setExternalStyles } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;qiankun&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setExternalScripts</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;https://cdn.example.com/some-script.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li>设置自定义导出方法 如果子应用必须动态创建script或link标签，并且这些标签必须动态加载并执行某些代码，可以通过设置自定义导出方法来解决这个问题。</li></ol><p>首先，在子应用中定义一个自定义导出方法，例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 子应用中定义自定义导出方法</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">exportMicroAppScript</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  script.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(script);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 子应用中定义自定义导出方法</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">exportMicroAppScript</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">url</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">script</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  script.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">  document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(script);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>接着，在父应用注册子应用时，添加getExternalScripts选项，并返回一个对象，该对象包含所有需要在子应用中动态插入的script标签：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 父应用注册子应用</span></span>
<span class="line"><span style="color:#B392F0;">registerMicroApps</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;sub-app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry: </span><span style="color:#9ECBFF;">&#39;//localhost:7100&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    container: </span><span style="color:#9ECBFF;">&#39;#app-container&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    activeRule: </span><span style="color:#9ECBFF;">&#39;/sub-app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    getExternalScripts: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;https://cdn.example.com/some-script.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;https://cdn.example.com/another-script.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ].</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: url,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">getScript</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">({ content: window.</span><span style="color:#B392F0;">exportMicroAppScript</span><span style="color:#E1E4E8;">(url) }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    })),</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 父应用注册子应用</span></span>
<span class="line"><span style="color:#6F42C1;">registerMicroApps</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;sub-app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    entry: </span><span style="color:#032F62;">&#39;//localhost:7100&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    container: </span><span style="color:#032F62;">&#39;#app-container&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    activeRule: </span><span style="color:#032F62;">&#39;/sub-app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    getExternalScripts: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;https://cdn.example.com/some-script.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;https://cdn.example.com/another-script.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">url</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">      name: url,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">getScript</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">({ content: window.</span><span style="color:#6F42C1;">exportMicroAppScript</span><span style="color:#24292E;">(url) }),</span></span>
<span class="line"><span style="color:#24292E;">    })),</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这样，在父应用加载子应用时，qiankun会从getExternalScripts选项中获取所有需要动态插入的script标签，并在合适的时候动态插入到子应用中。</p><p>简单来讲： 可以通过手动设置外部资源、自定义导出方法等方式来处理在使用qiankun时子应用中动态插入标签的问题。</p><h2 id="在使用-qiankun-时-如何处理老项目的资源加载问题" tabindex="-1">在使用 qiankun 时，如何处理老项目的资源加载问题？ <a class="header-anchor" href="#在使用-qiankun-时-如何处理老项目的资源加载问题" aria-label="Permalink to &quot;在使用 qiankun 时，如何处理老项目的资源加载问题？&quot;">​</a></h2><p>在使用qiankun时，如果需要将老项目作为子应用嵌入到父应用中，可能会出现一些资源加载问题，如样式覆盖、命名冲突等。以下是一些具体的解决方案：</p><ol><li>使用shadow DOM使用shadow DOM可以将子应用的HTML和CSS代码隔离开来，并确保它们不会与父应用的代码冲突。这种方法需要子应用的代码支持shadow DOM，并且需要手动配置。</li><li>前缀命名 在子应用的HTML和CSS中添加前缀，以避免与父应用的代码冲突。例如，可以在子应用的CSS中添加一个类似于.sub-app-的前缀，以确保所有的选择器都只针对子应用的DOM元素生效。同样地，也可以在子应用中为所有的ID和JavaScript变量添加前缀。</li><li>自定义主题/样式库 如果子应用中存在大量的公共组件或样式，可以将它们提取到单独的主题/样式库中，以便在多个子应用中共享使用。</li><li>懒加载 对于不同子应用之间可能出现的重复模块，可以利用webpack的代码分割功能进行懒加载，在父应用中只加载一次，然后在不同的子应用中共享使用。这种方式需要对老项目进行适当的重构，以确保该方案能够正常使用。</li><li>全局变量定义 可以在父应用中全局定义一些与子应用相关的变量，例如window.subAppPrefix = &#39;sub-app-&#39;;，然后在子应用中使用该前缀来避免与父应用的代码冲突。</li></ol><blockquote><p>假设我们有一个老项目，它是一个单页应用，使用了Bootstrap作为样式库。现在，我们需要将该应用作为子应用嵌入到qiankun的父应用中。</p></blockquote><p>首先，我们可以考虑使用前缀命名的方式来避免与父应用的代码冲突。例如，我们可以在老项目中添加一个类似于.old-app-的前缀，以确保所有的选择器都只针对老项目的DOM元素生效。同时，在父应用中也需要为所有的相应元素添加前缀，例如.sub-app .old-app-。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* 子应用CSS */</span></span>
<span class="line"><span style="color:#E1E4E8;">.old</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">button {</span></span>
<span class="line"><span style="color:#E1E4E8;">  background</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">color</span><span style="color:#E1E4E8;">: red;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">color</span><span style="color:#E1E4E8;">: white;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 父应用CSS */</span></span>
<span class="line"><span style="color:#E1E4E8;">.sub</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app .old</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">button {</span></span>
<span class="line"><span style="color:#E1E4E8;">  background</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">color</span><span style="color:#E1E4E8;">: blue;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* 子应用CSS */</span></span>
<span class="line"><span style="color:#24292E;">.old</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">button {</span></span>
<span class="line"><span style="color:#24292E;">  background</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">color</span><span style="color:#24292E;">: red;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">color</span><span style="color:#24292E;">: white;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 父应用CSS */</span></span>
<span class="line"><span style="color:#24292E;">.sub</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app .old</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">button {</span></span>
<span class="line"><span style="color:#24292E;">  background</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">color</span><span style="color:#24292E;">: blue;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>其次，我们可以考虑使用自定义主题/样式库的方式来优化样式。我们可以将老项目中使用的Bootstrap样式提取到独立的文件中，并在父应用和子应用中共享使用。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 子应用HTML --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stylesheet&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;//cdn.example.com/bootstrap.min.css&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 父应用HTML --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stylesheet&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;//cdn.example.com/bootstrap.min.css&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 子应用HTML --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stylesheet&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;//cdn.example.com/bootstrap.min.css&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 父应用HTML --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stylesheet&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;//cdn.example.com/bootstrap.min.css&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>最后，我们可以考虑使用懒加载的方式来优化性能。我们可以将老项目中重复的模块提取出来，然后在父应用中进行懒加载，并在不同的子应用中共享使用。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 父应用JavaScript</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;old-app/moduleA&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.oldAppModuleA </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 子应用JavaScript</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;old-app/moduleA&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.oldAppModuleA.</span><span style="color:#B392F0;">doSomething</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 父应用JavaScript</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;old-app/moduleA&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  window.oldAppModuleA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 子应用JavaScript</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;old-app/moduleA&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.oldAppModuleA.</span><span style="color:#6F42C1;">doSomething</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="解释一下-qiankun-的-start-函数的作用和参数-如果只有一个子项目-你会如何启用预加载" tabindex="-1">解释一下 qiankun 的 start 函数的作用和参数？如果只有一个子项目，你会如何启用预加载？ <a class="header-anchor" href="#解释一下-qiankun-的-start-函数的作用和参数-如果只有一个子项目-你会如何启用预加载" aria-label="Permalink to &quot;解释一下 qiankun 的 start 函数的作用和参数？如果只有一个子项目，你会如何启用预加载？&quot;">​</a></h2><p>qiankun的start函数是启动整个微前端应用的函数，用于启动父应用和所有子应用。该函数接受一个可选参数options，其中包含一些配置项，用于控制微前端应用的行为。</p><p>start函数主要的作用是：</p><ol><li>加载并注册所有微应用。</li><li>根据当前URL匹配合适的微应用，并激活它。</li><li>监听路由变化，根据新的URL切换微应用。</li></ol><p>以下是start函数的常用配置项：</p><ol><li>prefetch：是否开启微应用的预加载，默认值为false。</li><li>sandbox：微应用沙箱的配置，用于隔离微应用中的JavaScript代码和DOM元素。</li><li>singular：是否只允许同时激活一个微应用。</li><li>fetch：自定义的fetch函数，用于加载微应用的HTML内容和JavaScript代码。</li></ol><p>如果只有一个子项目时，我们可以通过设置prefetch选项来启用预加载。具体实现方法如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">registerMicroApps</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;sub-app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry: </span><span style="color:#9ECBFF;">&#39;//localhost:7100&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    container: </span><span style="color:#9ECBFF;">&#39;#app-container&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    activeRule: </span><span style="color:#9ECBFF;">&#39;/sub-app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    prefetch: </span><span style="color:#9ECBFF;">&#39;all&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 预加载全部静态资源</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">registerMicroApps</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;sub-app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    entry: </span><span style="color:#032F62;">&#39;//localhost:7100&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    container: </span><span style="color:#032F62;">&#39;#app-container&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    activeRule: </span><span style="color:#032F62;">&#39;/sub-app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    prefetch: </span><span style="color:#032F62;">&#39;all&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 预加载全部静态资源</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在上述代码中，我们向registerMicroApps函数中传入一个子应用对象，并在其中设置prefetch属性为&#39;all&#39;，表示预加载所有静态资源。这样，在父应用启动时，qiankun就会自动预加载子应用的静态资源。</p><p>需要注意的是，启用预加载可能会影响微应用的性能和用户体验，因此需要根据实际需求来决定是否启用。</p><h2 id="在使用-qiankun-时-如何处理-js-沙箱不能解决的-js-污染问题" tabindex="-1">在使用 qiankun 时，如何处理 js 沙箱不能解决的 js 污染问题？ <a class="header-anchor" href="#在使用-qiankun-时-如何处理-js-沙箱不能解决的-js-污染问题" aria-label="Permalink to &quot;在使用 qiankun 时，如何处理 js 沙箱不能解决的 js 污染问题？&quot;">​</a></h2><p>在使用qiankun时，如果出现js沙箱无法解决的js污染问题，可以通过以下方式进行处理：</p><ol><li><p>提高应用安全级别 js沙箱是保护微前端应用免受外部恶意攻击的重要手段之一。因此，我们可以提高应用的安全级别，以减少可能存在的漏洞和被攻击的风险。</p></li><li><p>使用CDN等资源加速服务 在使用第三方库时，我们可以考虑使用CDN等资源加速服务来加载这些库，并优先选择官方或可信赖的CDN。这样可以减少非法脚本注入的可能性。</p></li><li><p>对于自己编写的代码，需要注意以下几点：</p></li></ol><ul><li>避免使用eval()函数。</li><li>避免使用Function构造函数。</li><li>避免使用with语句。</li><li>避免在全局作用域中定义不必要的变量和函数。</li></ul><ol start="4"><li><p>使用CSP(Content Security Policy) CSP是一个HTTP头，它可以让开发者指定网页中可以执行哪些类型的代码。CSP可以限制页面上的JavaScript代码只能够从特定的源加载，并且可以防止页面中注入恶意脚本。因此，我们可以使用CSP来增强应用的安全性。</p></li><li><p>可以使用js-xss等XSS过滤器来过滤用户输入的HTML和JavaScript代码，以避免XSS攻击。</p></li></ol><p>以上几种方式可以帮助我们处理在使用qiankun时js沙箱无法解决的js污染问题。需要注意的是，在提高应用安全级别和使用CSP等措施时，需要根据实际需求和场景来进行评估和决策。</p><h2 id="解释一下-qiankun-如何实现-keep-alive-的需求" tabindex="-1">解释一下 qiankun 如何实现 keep-alive 的需求 <a class="header-anchor" href="#解释一下-qiankun-如何实现-keep-alive-的需求" aria-label="Permalink to &quot;解释一下 qiankun 如何实现 keep-alive 的需求&quot;">​</a></h2><p>qiankun并没有内置keep-alive功能，但我们可以通过一些方法来实现它。</p><p>首先，我们可以在父应用中维护一个子应用的缓存列表，例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cachedApps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;sub-app1&#39;</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cachedApps</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;sub-app1&#39;</span><span style="color:#24292E;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，在切换微应用时，我们可以判断当前微应用是否需要进行缓存。如果需要，则将其标记为已缓存，并将其DOM元素从页面中移除，以便下次使用时直接显示缓存的结果；否则，直接卸载该微应用。</p><p>以下是一个示例代码：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cacheSubApp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 缓存的子应用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadMicroApp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cachedApps.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(name)) { </span><span style="color:#6A737D;">// 如果需要缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cacheSubApp </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> cacheSubApp.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(cacheSubApp); </span><span style="color:#6A737D;">// 如果已经缓存过了，直接返回缓存结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadApp</span><span style="color:#E1E4E8;">(name).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      app.status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NOT_LOADED</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      cachedApps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">container</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      container.style.display </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;none&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      container.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> app.template;</span></span>
<span class="line"><span style="color:#E1E4E8;">      document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(container); </span><span style="color:#6A737D;">// 将子应用的DOM元素添加到页面中，方便下次使用时快速显示</span></span>
<span class="line"><span style="color:#E1E4E8;">      app.container </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> container;</span></span>
<span class="line"><span style="color:#E1E4E8;">      cacheSubApp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> app;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> app;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 如果不需要缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unloadMicroApp</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadApp</span><span style="color:#E1E4E8;">(name).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        app.status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NOT_LOADED</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        app.container </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app-container&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> app;</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unloadMicroApp</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cacheSubApp) { </span><span style="color:#6A737D;">// 如果存在缓存的子应用，需要先将其从页面中移除</span></span>
<span class="line"><span style="color:#E1E4E8;">    document.body.</span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(cacheSubApp.container);</span></span>
<span class="line"><span style="color:#E1E4E8;">    cacheSubApp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cacheSubApp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 缓存的子应用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadMicroApp</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cachedApps.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(name)) { </span><span style="color:#6A737D;">// 如果需要缓存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cacheSubApp </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> cacheSubApp.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> name) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(cacheSubApp); </span><span style="color:#6A737D;">// 如果已经缓存过了，直接返回缓存结果</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadApp</span><span style="color:#24292E;">(name).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">app</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      app.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NOT_LOADED</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      cachedApps.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">container</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      container.style.display </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;none&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      container.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app.template;</span></span>
<span class="line"><span style="color:#24292E;">      document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(container); </span><span style="color:#6A737D;">// 将子应用的DOM元素添加到页面中，方便下次使用时快速显示</span></span>
<span class="line"><span style="color:#24292E;">      app.container </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> container;</span></span>
<span class="line"><span style="color:#24292E;">      cacheSubApp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> app;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果不需要缓存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unloadMicroApp</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadApp</span><span style="color:#24292E;">(name).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">app</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        app.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NOT_LOADED</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        app.container </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app-container&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> app;</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unloadMicroApp</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cacheSubApp) { </span><span style="color:#6A737D;">// 如果存在缓存的子应用，需要先将其从页面中移除</span></span>
<span class="line"><span style="color:#24292E;">    document.body.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(cacheSubApp.container);</span></span>
<span class="line"><span style="color:#24292E;">    cacheSubApp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>以上代码中，我们通过判断微应用是否需要缓存，并在需要缓存时将其DOM元素添加到页面中，以便下次使用时直接显示缓存的结果。对于不需要缓存的微应用，则直接卸载它们。</p><p>需要注意的是，这种方法可能会导致内存泄漏，因此需要谨慎使用。另外，如果使用了keep-alive功能，则需要确保所有微应用都具有相同的路由结构和状态管理机制，以避免出现一些意料之外的问题。</p><p>实际项目中，如基于qiankun进行微前端开发的CRM系统，我们也通常会使用缓存的方式来提高系统的性能和用户体验。例如，在销售订单模块中，我们可以对之前打开过的订单进行缓存，以便下次进入该模块时可以快速显示订单列表。同时，我们也会根据实际需求和场景来评估和决策是否需要开启keep-alive功能。</p><h2 id="解释一下-qiankun-和-iframe-在微前端实现方式上的区别和优劣吗-在什么情况下-你会选择使用-iframe-而不是-qiankun" tabindex="-1">解释一下 qiankun 和 iframe 在微前端实现方式上的区别和优劣吗？在什么情况下，你会选择使用 iframe 而不是 qiankun <a class="header-anchor" href="#解释一下-qiankun-和-iframe-在微前端实现方式上的区别和优劣吗-在什么情况下-你会选择使用-iframe-而不是-qiankun" aria-label="Permalink to &quot;解释一下 qiankun 和 iframe 在微前端实现方式上的区别和优劣吗？在什么情况下，你会选择使用 iframe 而不是 qiankun&quot;">​</a></h2><ol><li>技术方案</li></ol><ul><li>qiankun：基于浏览器端路由的容器化微前端框架。</li><li>iframe：基于浏览器多窗口技术的微前端实现方式。</li></ul><ol start="2"><li>性能</li></ol><ul><li>qiankun：通过使用Webpack和SystemJS等技术，可以做到代码分割、按需加载等优化措施，从而提高了性能。</li><li>iframe：因为每个子应用都是独立的窗口，所以可能会存在传输数据量大、渲染性能差等问题。</li></ul><ol start="3"><li>通信</li></ol><ul><li>qiankun：使用自定义事件和全局状态管理来进行子应用之间的通信。</li><li>iframe：使用postMessage API来进行跨域消息通信。</li></ul><ol start="4"><li>安全</li></ol><ul><li>qiankun：使用JavaScript沙箱隔离子应用中的代码和DOM元素，增强了应用的安全性。</li><li>iframe：在跨域访问时，需要考虑一些安全问题，例如防止XSS攻击、防止iframe嵌套等。</li></ul><p>在微前端开发中，我们应根据实际情况选择合适的实现方式。在一些简单的场景中，我们可以使用iframe来进行微前端开发；在一些复杂的场景中，我们可以使用qiankun等容器化框架来进行微前端开发。</p><p>当需要实现跨域通信、隔离子应用代码和DOM元素、动态加载等功能时，qiankun是一种更好的选择。如果只需要简单地将多个独立的Web应用程序组合在一起，或者需要实现多窗口操作等功能时，可以尝试使用iframe。</p><p>需要注意的是，在使用iframe时，需要考虑其性能、安全和可用性等问题，并做好相关的优化措施。</p><h2 id="qiankun是如何实现css隔离的-该方案有什么缺点-还有其它方案么" tabindex="-1">qiankun是如何实现CSS隔离的，该方案有什么缺点，还有其它方案么? <a class="header-anchor" href="#qiankun是如何实现css隔离的-该方案有什么缺点-还有其它方案么" aria-label="Permalink to &quot;qiankun是如何实现CSS隔离的，该方案有什么缺点，还有其它方案么?&quot;">​</a></h2><p>在qiankun中，CSS隔离是通过为每个子应用创建一个独立的命名空间来实现的。具体地说，当我们把一个子应用注册到qiankun中时，qiankun会根据该应用的名称创建一个唯一的前缀，并将这个前缀添加到该应用中所有CSS选择器的前面。</p><p>例如，如果我们有两个子应用A和B，它们都使用了名为.button的CSS类，则qiankun会自动将应用A中的.button转换为.app-A-button，将应用B中的.button转换为.app-B-button。这样，就能够避免不同子应用之间的CSS冲突。</p><p>该方案的主要优点是简单易用，不需要对子应用的代码进行修改，也不需要额外的编译过程。另外，在多个子应用中共享组件库或UI库时，这种方案也能够很好地解决样式冲突问题。</p><p>然而，该方案也存在一些缺点。首先，这种方法只适用于CSS的隔离，而无法隔离其他资源（如JavaScript、图片等）。其次，由于需要为每个子应用创建一个唯一的前缀，可能会导致CSS文件增大，从而影响加载和渲染性能。此外，对于一些比较复杂的CSS选择器，可能会出现无法正确转换的情况。</p><p>除了qiankun之外，还有一些其它方案可以用来实现多个子应用之间的CSS隔离。例如：</p><ol><li>在子应用中使用CSS Modules</li></ol><p>在子应用中使用CSS Modules来实现样式的局部作用域，从而避免样式冲突问题。例如，在React项目中，我们可以使用css-loader和style-loader等工具来启用CSS Modules，并设置localIdentName选项来生成唯一的类名。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;style-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              modules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                localIdentName: </span><span style="color:#9ECBFF;">&#39;[name]__[local]___[hash:base64:5]&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              },</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">css</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: [</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;style-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          {</span></span>
<span class="line"><span style="color:#24292E;">            loader: </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            options: {</span></span>
<span class="line"><span style="color:#24292E;">              modules: {</span></span>
<span class="line"><span style="color:#24292E;">                localIdentName: </span><span style="color:#032F62;">&#39;[name]__[local]___[hash:base64:5]&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              },</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,84),r=s("p",null,[n("然后，在JSX代码中，我们可以通过import styles from './styles.module.css'来引入样式表，并使用"),s("div",{className:"{styles.button}"},"Button"),n("来定义样式。")],-1),t=a(`<ol start="2"><li>使用Webpack的CSS Scope插件</li></ol><p>使用Webpack的CSS Scope插件能够自动为CSS选择器添加前缀，从而实现CSS隔离。例如，在webpack.config.js文件中，我们可以添加css-loader插件，并设置scopeBehaviour选项为global或local，以控制是否需要进行CSS隔离。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              modules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                scopeBehaviour: </span><span style="color:#9ECBFF;">&#39;local&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 控制是否需要进行CSS隔离</span></span>
<span class="line"><span style="color:#E1E4E8;">              },</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">css</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: [</span></span>
<span class="line"><span style="color:#24292E;">          {</span></span>
<span class="line"><span style="color:#24292E;">            loader: </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            options: {</span></span>
<span class="line"><span style="color:#24292E;">              modules: {</span></span>
<span class="line"><span style="color:#24292E;">                scopeBehaviour: </span><span style="color:#032F62;">&#39;local&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 控制是否需要进行CSS隔离</span></span>
<span class="line"><span style="color:#24292E;">              },</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ol start="3"><li>使用Shadow DOM</li></ol><p>使用Shadow DOM将每个子应用包装在一个独立的Shadow DOM中，从而实现CSS、DOM和JavaScript的完全隔离。例如，在Vue项目中，我们可以在App.vue组件中创建一个Shadow DOM，并将子组件插入到其中。</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- App.vue --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;container&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app1&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app1&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app2&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app2&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">container</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$el;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shadowRoot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> container.</span><span style="color:#B392F0;">attachShadow</span><span style="color:#E1E4E8;">({ mode: </span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app1Slot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;slot&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    app1Slot.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;app1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    shadowRoot.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(app1Slot);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app2Slot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;slot&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    app2Slot.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;app2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    shadowRoot.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(app2Slot);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- App.vue --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;container&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app1&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app2&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app2&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">container</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$el;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shadowRoot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> container.</span><span style="color:#6F42C1;">attachShadow</span><span style="color:#24292E;">({ mode: </span><span style="color:#032F62;">&#39;open&#39;</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app1Slot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;slot&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    app1Slot.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;app1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    shadowRoot.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(app1Slot);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app2Slot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;slot&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    app2Slot.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;app2&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    shadowRoot.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(app2Slot);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>然后，在父应用中，我们可以使用mount函数来将子应用挂载到相应的位置上。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// main.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { registerMicroApps, start } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;qiankun&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">registerMicroApps</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;app1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry: </span><span style="color:#9ECBFF;">&#39;http://localhost:3001&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    container: </span><span style="color:#9ECBFF;">&#39;#app1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    activeRule: </span><span style="color:#9ECBFF;">&#39;/app1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;app2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry: </span><span style="color:#9ECBFF;">&#39;http://localhost:3002&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    container: </span><span style="color:#9ECBFF;">&#39;#app2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    activeRule: </span><span style="color:#9ECBFF;">&#39;/app2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// main.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { registerMicroApps, start } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;qiankun&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">registerMicroApps</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;app1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    entry: </span><span style="color:#032F62;">&#39;http://localhost:3001&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    container: </span><span style="color:#032F62;">&#39;#app1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    activeRule: </span><span style="color:#032F62;">&#39;/app1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;app2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    entry: </span><span style="color:#032F62;">&#39;http://localhost:3002&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    container: </span><span style="color:#032F62;">&#39;#app2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    activeRule: </span><span style="color:#032F62;">&#39;/app2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>需要注意的是，在使用Shadow DOM时，我们还需要考虑一些浏览器兼容性、性能和安全等问题，并做好相关的优化和测试工作。</p><h2 id="qiankun中如何实现父子项目间的通信" tabindex="-1">qiankun中如何实现父子项目间的通信？ <a class="header-anchor" href="#qiankun中如何实现父子项目间的通信" aria-label="Permalink to &quot;qiankun中如何实现父子项目间的通信？&quot;">​</a></h2><p>在qiankun中，父子项目间的通信可以通过以下几种方式来实现：</p><ol><li>全局变量：在父应用和子应用之间设置一个全局变量，用于共享数据。例如，我们可以在父应用中定义一个全局对象，并将其暴露给子应用使用。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在父应用中定义一个全局对象</span></span>
<span class="line"><span style="color:#E1E4E8;">window.sharedData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  userName: </span><span style="color:#9ECBFF;">&#39;钟翰&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在子应用中读取全局变量</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.parent.sharedData.userName;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在父应用中定义一个全局对象</span></span>
<span class="line"><span style="color:#24292E;">window.sharedData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  userName: </span><span style="color:#032F62;">&#39;钟翰&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在子应用中读取全局变量</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.parent.sharedData.userName;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>CustomEvent：使用浏览器提供的CustomEvent事件，可以在父子应用之间发送消息并接收消息。例如，我们可以在父应用中使用window.dispatchEvent()方法发送一个CustomEvent事件，并在子应用中使用window.addEventListener()方法监听该事件。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在父应用中发送一个CustomEvent事件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">event</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;eventName&#39;</span><span style="color:#E1E4E8;">, { detail: { data: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> } });</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">dispatchEvent</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在子应用中监听CustomEvent事件</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;eventName&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.detail.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在父应用中发送一个CustomEvent事件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">event</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomEvent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;eventName&#39;</span><span style="color:#24292E;">, { detail: { data: </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;"> } });</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">dispatchEvent</span><span style="color:#24292E;">(event);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在子应用中监听CustomEvent事件</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;eventName&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.detail.data);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="3"><li>postMessage：使用postMessage可以实现跨域窗口之间的通信。在父应用和子应用之间，我们可以使用window.postMessage()方法发送消息，并使用window.addEventListener()方法监听消息。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在父应用中发送postMessage消息</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">targetWindow</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;child-iframe&#39;</span><span style="color:#E1E4E8;">).contentWindow;</span></span>
<span class="line"><span style="color:#E1E4E8;">targetWindow.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, data: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在子应用中监听postMessage消息</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.data.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.data.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在父应用中发送postMessage消息</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">targetWindow</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;child-iframe&#39;</span><span style="color:#24292E;">).contentWindow;</span></span>
<span class="line"><span style="color:#24292E;">targetWindow.</span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, data: </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在子应用中监听postMessage消息</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.data.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.data.data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="在主项目中使用qiankun注册子项目时-如何解决子项目路由的hash与history模式之争" tabindex="-1">在主项目中使用qiankun注册子项目时，如何解决子项目路由的hash与history模式之争？ <a class="header-anchor" href="#在主项目中使用qiankun注册子项目时-如何解决子项目路由的hash与history模式之争" aria-label="Permalink to &quot;在主项目中使用qiankun注册子项目时，如何解决子项目路由的hash与history模式之争？&quot;">​</a></h2><p>在使用qiankun注册子应用时，路由的hash与history模式的选择是比较重要的问题。下面是一些解决方案供参考：</p><ol><li>统一使用hash模式</li></ol><p>这种方式的好处是简单易用，不需要额外的配置和调整就可以正常工作。同时也避免了多个子应用之间路由冲突的问题。但是，使用hash模式会使URL显得比较丑陋，并且在SEO、链接分享等方面存在一定的局限性。</p><ol start="2"><li>统一使用history模式</li></ol><p>这种方式可以使URL更加美观，符合现代化的设计理念，同时也对SEO、链接分享等有一定的优化效果。但是，在使用多个子应用时，需要确保每个子应用的路由名称不会冲突，否则可能会导致路由冲突的问题。</p><ol start="3"><li>自适应模式</li></ol><p>这种方式可以根据当前页面的路径来自适应地选择使用hash或者history模式。在qiankun中，可以使用master应用的history对象来获取当前页面的路径信息，然后通过判断路径中是否包含子应用的前缀来决定使用哪种路由模式。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { registerMicroApps, start } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;qiankun&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">registerMicroApps</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;app1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry: </span><span style="color:#9ECBFF;">&#39;//localhost:8081&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    activeRule: </span><span style="color:#9ECBFF;">&#39;/app1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;app2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry: </span><span style="color:#9ECBFF;">&#39;//localhost:8082&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    activeRule: </span><span style="color:#9ECBFF;">&#39;/app2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">useHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.location.pathname.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/app1&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">routerType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> useHash </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hash&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;history&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">registerMicroApps</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;app1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      entry: </span><span style="color:#9ECBFF;">&#39;//localhost:8081&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      activeRule: </span><span style="color:#9ECBFF;">&#39;/app1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      props: { routerType },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;app2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      entry: </span><span style="color:#9ECBFF;">&#39;//localhost:8082&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      activeRule: </span><span style="color:#9ECBFF;">&#39;/app2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      props: { routerType },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { registerMicroApps, start } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;qiankun&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">registerMicroApps</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;app1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    entry: </span><span style="color:#032F62;">&#39;//localhost:8081&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    activeRule: </span><span style="color:#032F62;">&#39;/app1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;app2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    entry: </span><span style="color:#032F62;">&#39;//localhost:8082&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    activeRule: </span><span style="color:#032F62;">&#39;/app2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">useHash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.location.pathname.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/app1&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">routerType</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> useHash </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hash&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;history&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">registerMicroApps</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;app1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      entry: </span><span style="color:#032F62;">&#39;//localhost:8081&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      activeRule: </span><span style="color:#032F62;">&#39;/app1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      props: { routerType },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;app2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      entry: </span><span style="color:#032F62;">&#39;//localhost:8082&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      activeRule: </span><span style="color:#032F62;">&#39;/app2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      props: { routerType },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>需要注意的是，在使用自适应模式时，需要确保每个子应用都可以适应两种路由模式，并对其进行相应的调整和优化。同时，在处理URL参数等方面也需要做好兼容性处理，以保证系统的稳定性和可靠性。</p><h2 id="说说qiankun的资源加载机制-import-html-entry" tabindex="-1">说说qiankun的资源加载机制（import-html-entry） <a class="header-anchor" href="#说说qiankun的资源加载机制-import-html-entry" aria-label="Permalink to &quot;说说qiankun的资源加载机制（import-html-entry）&quot;">​</a></h2><p>qiankun使用了一种名为import-html-entry的资源加载机制，该机制基于动态导入和HTML解析技术，可以动态地加载子应用所需的资源，并将其注入到DOM中。具体来说，该机制主要包括以下几个步骤：</p><ol><li>解析HTML</li></ol><p>首先，qiankun会从子应用的entry地址中获取HTML内容，并对其进行解析和处理。在解析过程中，qiankun会识别出需要加载的JS、CSS和其他资源，并通过动态创建link、script等标签来动态加载这些资源。</p><ol start="2"><li>加载JS</li></ol><p>在加载JS时，qiankun会利用浏览器的动态导入特性来异步加载JS模块。在加载完毕后，qiankun会调用JS的导出函数来获取子应用的组件、路由和其他配置信息，并将其保存到内存中。</p><ol start="3"><li>加载CSS</li></ol><p>在加载CSS时，qiankun会通过动态创建link标签来异步加载CSS文件。在加载完毕后，qiankun会将CSS样式表插入到head标签中。</p><ol start="4"><li>创建Sandbox环境</li></ol><p>在加载完所有资源后，qiankun会根据已有的配置信息创建一个沙箱环境，用于隔离和保护子应用的运行环境。在沙箱环境中，qiankun会重写全局变量、监听事件等操作，以确保子应用的运行不会影响到父应用和其他子应用。</p><ol start="5"><li>渲染组件</li></ol><p>在沙箱环境创建完毕后，qiankun会根据配置信息渲染出子应用的组件，并将其插入到父应用的DOM中。同时，qiankun还会监听子应用的路由变化，并进行相应的跳转和渲染。</p><p>需要注意的是，import-html-entry机制并非绝对适用于所有场景，具体使用时需要考虑一些安全性、可扩展性和易用性等问题，并结合其他技术如发布系统、版本控制等工具来提高开发效率和用户体验。</p><h2 id="还了解其他微前端框架么-简单讲一下" tabindex="-1">还了解其他微前端框架么，简单讲一下？ <a class="header-anchor" href="#还了解其他微前端框架么-简单讲一下" aria-label="Permalink to &quot;还了解其他微前端框架么，简单讲一下？&quot;">​</a></h2><ol><li>qiankun</li></ol><p>优点：</p><ul><li>完整的生命周期控制：支持子应用的启动、挂载、卸载等操作，可灵活处理不同场景下的生命周期问题。</li><li>智能化路由管理：支持多种路由模式，可以自适应根据当前页面路径来选择使用history或hash模式。</li><li>灵活的组件通信方式：支持props传递、全局状态管理、事件订阅等方式进行组件间通信，可以满足不同粒度和复杂度的通信需求。</li><li>内置的沙箱环境：支持自定义沙箱配置和策略，可以有效地隔离和保护子应用的运行环境。</li><li>开放的插件机制：支持第三方插件开发和集成，可以扩展和定制不同的功能和特性。</li></ul><p>缺点：</p><ul><li>集成和维护成本较高：需要对多个技术栈和应用进行统一管理和调度，在维护和更新方面需要投入更多的人力和资源。 8 对已有应用的适配需要一定的工作量：需要对现有应用进行改造和调整，以适配qiankun的运行和配置要求。</li></ul><ol start="2"><li>single-spa</li></ol><p>优点：</p><ul><li>多框架兼容：支持多种前端框架，如React、Angular、Vue等。</li><li>完整的生命周期控制：支持子应用的启动、挂载、卸载等操作，可灵活处理不同场景下的生命周期问题。</li><li>灵活的路由管理：支持自定义路由规则，可以灵活处理各种路由场景和需求。</li><li>多重通信机制：支持全局状态管理、事件总线、props传递等多种方式进行组件间通信。</li></ul><p>缺点：</p><ul><li>部分功能需要手动实现：single-spa本身只提供了基础的生命周期控制和路由管理功能，一些其他的特性和功能需要手动实现。</li><li>学习成本较高：single-spa对模块化和异步加载技术有一定要求，在学习和使用时需要投入更多的时间和精力。</li><li>对已有应用的适配需要一定的工作量：需要对现有应用进行改造和调整，以适配single-spa的运行和配置要求。</li></ul><ol start="3"><li>微前端q-mic</li></ol><p>优点：</p><ul><li>基于vue.js的开发：针对webapp前端单页应用，基于vue.js进行搭建，微前端的应用在处理上相对简便。</li><li>支持嵌套子应用：q-mic可以嵌套无限层的子应用。</li><li>采用shadow dom：各子应用之间的样式和DOM元素是相互隔离的，使用shadow dom实现。</li></ul><p>缺点：</p><ul><li>社区较小：q-mic是一个比较新的微前端框架，目前在国内的使用者较少，相对来说其社区支持与生态完善度还不如qiankun等已有的框架。</li><li>可拓展性不高：由于q-mic是基于Vue.js进行的开发，因此如果想要在非Vue.js项目中使用，就需要自己去做一些改造和适配工作了。</li></ul>`,56),E=[c,r,t];function i(y,u,b,d,m,F){return l(),o("div",null,E)}const A=p(e,[["render",i]]);export{C as __pageData,A as default};
